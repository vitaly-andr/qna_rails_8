= turbo_frame_tag dom_id(question) do
  li.question.list-none
    main.pt-8.pb-16.lg:pt-16.lg:pb-24.bg-white.dark:bg-gray-900.antialiased
      .flex.justify-between.px-4.mx-auto.max-w-screen-xl
        article.mx-auto.w-full.max-w-4xl.format.format-sm.sm:format-base.lg:format-lg.format-blue.dark:format-invert
          header.mb-4.lg:mb-6.not-format
            address.flex.items-center.mb-6.not-italic
              .inline-flex.items-center.mr-3.text-sm.text-gray-900.dark:text-white
                img.mr-4.w-16.h-16.rounded-full src="https://flowbite.com/docs/images/people/profile-picture-2.jpg" alt="Jese Leos"
                div
                  p.text-xl.font-bold.text-gray-900.dark:text-white Asked by: #{question.author.name}  #{question.author.email}
                  p.text-base.text-gray-500.dark:text-gray-400 Graphic Designer, educator & CEO Flowbite
                  p.text-base.text-gray-500.dark:text-gray-400
                    time datetime=question.created_at.iso8601 title=question.created_at.strftime("%B %d, %Y")
                      = question.created_at.strftime("%b. %d, %Y")
            .inline-flex.items-center.justify-between.w-full.mr-3.text-sm.text-gray-900.dark:text-white
              - if user_signed_in? && current_user.author_of?(question)
                button.flex.items-center.font-medium.text-sm.text-gray-500.hover:underline.dark:text-gray-400 type="button"
                  = link_to 'Edit Question', edit_question_path(question), data: { turbo_frame: dom_id(question) }
                button.flex.items-center.font-medium.text-sm.text-gray-500.hover:underline.dark:text-gray-400 type="button"
                  = link_to 'Delete Question', question_path(question),
                          data: { turbo_method: :delete,
                                  turbo_frame: '_top',
                                  id: "delete-question-#{question.id}",
                                  turbo_confirm: 'Are you sure?',
                                  turbo_action: 'advance',
                          }
              = render partial: 'subscriptions/subscription_button', locals: { subscribable: question }
            h1.mb-4.text-3xl.font-extrabold.leading-tight.text-gray-900.lg:mb-6.lg:text-4xl.dark:text-white
              = link_to question.title, question_path(question), data: { turbo: false }

          figure.image.is-48x48
            - if question.reward
              = image_tag question.reward.image.variant(resize_to_limit: [ 150, 150 ])
          p = truncate(question.body, length: 100)
          - if user_signed_in? && !current_user.author_of?(question)
            .nav.level.is-mobile.vote-area id=dom_id(question) data-controller="vote" data-vote-votable-id="#{question.id}" data-vote-votable-type="Question"
              p#error-message.is-hidden  data-vote-target="errorMessage"
              .div.flex.items-center.mt-4.space-x-4
                button.flex.items-center.font-medium.text-sm.text-gray-500.hover:underline.dark:text-gray-400 type="button"
                  span.mx-1.vote__up data-action="click->vote#upvote"
                    = image_tag 'thumbs-up.svg', class: 'w-8 h-8'
                  span.mx-1.vote__down data-action="click->vote#downvote"
                    = image_tag 'thumbs-down.svg', class: 'w-8 h-8'
                  span.mx-1.vote__cancel data-action="click->vote#cancelVote"
                    = image_tag 'trash-can.svg', class: 'w-8 h-8'
                  | Rating:
                  span.level-item.vote__rating data-vote-target="rating"= question.rating

          - if question.links.any? || question.files.attached?
            .title.has-text-centered Attachments
            .columns
              - if question.links.any?
                .column.is-half
                  .title.has-text-centered Links:
                  .section#question-links
                    ul
                      - question.links.each do |link|
                        li = render partial: 'shared/link', locals: { link: link }
              .column.is-half
                .title.has-text-centered Files:
                - if question.files.attached?
                  ul.attachments
                    - question.files.each do |file|
                      li id="file_#{file.id}"
                        = link_to file.filename.to_s, url_for(file)
                        - if user_signed_in? && current_user.author_of?(question)
                          = link_to 'X', attachment_path(file),
                                  data: { turbo_method: :delete, turbo_confirm: 'Are you sure you want to delete this file?' },
                                  class: 'delete-file-link',
                                  style: 'color: red; margin-left: 10px;'

          = cache ["comments", question.id, question.comments.maximum(:updated_at)] do
            = render partial: 'comments/comments', locals: { commentable: question }
